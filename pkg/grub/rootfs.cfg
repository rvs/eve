# The goal of this grub.cfg is to drive GRUB through the EVE boot sequence.
# This boot sequence (typically) consists of:
#    #1. picking the right Hypervisor binary and a corresponding bootload command
#    #1.1. picking the right set of options for the Hypervisor
#    #2. picking the right Dom0 kernel and a corresponding bootload command
#    #2.1. picking the right set of options for the Dom0
#    #3. [optionally] picking the right initrd for Dom0 and a corresponding bootload command
#    #4. [arch specific] picking the right device tree and a corresponding bootload command
# We assume that the required binaries live on the same GRUB device from which GRUB itself
# originated. This allows us to construct nicely self-contained rootfs images of EVE and
# not waste our time hunting for the root partition.
#
#     root - GRUB's handle for referencing rootfs
#     rootfs_root - Dom0 handle for referencing rootfs
#
#     rootfs_title_suffix
#     initrd_cmd
#     rootfs (file name from where rootfs is coming from)

# linuxkit_cmdline is weird because we expect it to be tweaked during build phase (via sed)
set linuxkit_cmdline=

# the following variables are used for dynamically figuring out environment we're running in
set grub_virt=
set rootfs_root=
set rootfs_title=EVE

# these vars need to be set XXX

# Tweaking behaviour of GRUB itself 
set timeout=2
set gfxpayload=text
set default=0
set pager=1

function set_global {
   set $1="$2"
   export $1
}

function do_if_args {
   if [ -n "$2" ]; then
      "$@"
   fi
}

function set_to_existing_file {
  if [ -f "$2" ]; then
     set_global "$1" "$2"
  fi
}

function set_grub_virt {
   smbios -t 1 -s 0 --set smb_vendor
   if regexp QEMU $smb_vendor ; then
     set_global grub_virt qemu
   else
     set_global grub_virt baremetal
   fi
}

function set_rootfs_root {
   probe --set partuuid -U $root
   set rootfs_root=PARTUUID=$partuuid
   export rootfs_root
}

function set_config_overrides {
  search.part_label CONFIG config_part "$root"
  if [ -n "$config_part" ]; then
     set_to_existing_file config_grub_cfg "($config_part)/grub.cfg"
     set_to_existing_file devicetree "($config_part)/eve.dtb"
  fi
}

function set_rootfs_title {
   cat -s rootfs_title /etc/eve-release
}

function set_generic {
   set_global hv_dom0_mem_settings "dom0_mem=640M,max:640M"
   set_global hv_dom0_cpu_settings "dom0_max_vcpus=1 dom0_vcpus_pin"
   set_global hv_platform_tweaks "smt=false"

   set_global dom0 /boot/kernel
   # the following is true everywhere, but on x86/bare-metail -- see bellow
   set_global dom0_console "console=hvc0"
   set_global dom0_rootfs "root=$rootfs_root"
   set_global dom0_cmdline "$linuxkit_cmdline"
}

function set_x86_64 {
   set_global load_hv_cmd multiboot2
   set_global load_dom0_cmd module2
   set_global load_initrd_cmd module2
   set_global hv /boot/xen.gz
   set_global hv_console " "
}

function set_x86_64_baremetal {
   set_generic
   set_x86_64
   set_global hv_platform_tweaks "$hv_platform_tweaks efi=no-rs"
   set_global dom0_platform_tweaks " "
   set_global dom0_console "console=tty0 console=ttyS0"
}

function set_x86_64_qemu {
   set_generic
   set_x86_64
   set_global hv_console "console=com1"
   set_global hv_platform_tweaks "$hv_platform_tweaks clocksource=pit"
   set_global dom0_platform_tweaks "clocksource=tsc clocksource_failover=xen"
}

function set_arm64 {
   set_global load_hv_cmd xen_hypervisor
   set_global load_dom0_cmd xen_module
   set_global load_initrd_cmd xen_module
   set_global load_devicetree_cmd devicetree
   set_global hv /boot/xen.efi
   set_global hv_console "console=dtuart"
   set_global hv_platform_tweaks " "
   set_global load_devicetree_cmd devicetree
}

function set_arm64_baremetal {
   set_generic
   set_arm64
   set_global load_devicetree_cmd devicetree
   set_global dom0_platform_tweaks " "
}

function set_arm64_qemu {
   set_generic
   set_arm64
   set_global dom0_platform_tweaks "hmp-unsafe=true"
   # if running under QEMU, make sure to check dynamic partition for device trees
   search.fs_label "QEMU VVFAT" qemu_part
   set_to_existing_file devicetree "($qemu_part)/eve.dtb"
}

set_grub_virt
set_rootfs_root
set_rootfs_title
set_${grub_cpu}_${grub_virt}

# now set a few override file names (if files exist)
set_config_overrides
set_to_existing_file efi_grub_cfg "/EFI/BOOT/grub-hv.cfg"

# process the overrides
do_if_args source $efi_grub_cfg
do_if_args source $config_grub_cfg

menuentry "Boot ${rootfs_title}${rootfs_title_suffix}" {
     $load_hv_cmd $hv $hv_console $hv_platform_tweaks $hv_dom0_mem_settings $hv_dom0_cpu_settings $hv_extra_args
     $load_dom0_cmd $dom0 $dom0_console $dom0_rootfs $dom0_platform_tweaks $dom0_cmdline $dom0_extra_args
     do_if_args $load_initrd_cmd $initrd
     do_if_args $load_devicetree_cmd $devicetree
}

submenu 'Set Boot Options' {
   menuentry 'force serial console on x86/baremetal com1' {
      set_global hv_console "com1=115200,8n1 console=com1"
      set_global dom0_console "console=hvc0"
   }

   menuentry 'set x86/baremetal boot options' {
      set_x86_64_baremetal 
   }

   menuentry 'set x86/qemu boot options' {
      set_x86_64_qemu 
   }

   menuentry 'set ARM/baremetal boot options' {
      set_arm64_baremetal 
   }

   menuentry 'set ARM/qemu boot options' {
      set_arm64_qemu
   }

   menuentry 'show boot options' {
      set_global zboot1 "$load_hv_cmd $hv $hv_console $hv_platform_tweaks $hv_dom0_mem_settings $hv_dom0_cpu_settings $hv_extra_args"
      set_global zboot2 "$load_dom0_cmd $dom0 $dom0_console $dom0_rootfs $dom0_platform_tweaks $dom0_cmdline $dom0_extra_args"
      set_global zboot3 "do_if_args $load_initrd_cmd $initrd"
      set_global zboot4 "do_if_args $load_devicetree_cmd $devicetree"
   }

   if [ -n "$do_extra_submenus" ]; then
      $do_extra_submenus
   fi
}
