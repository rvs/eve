#!/bin/sh
# shellcheck shell=dash
#
# This script is an entry point for a standalone installer.
# It is expected to probe for the destination installation
# media and arrange for source files to be in /parts. Some
# of these files will be supplied from outside of the container
# in /bits, some will be constructed on the fly depending
# on settings that were passed via kernel command line:
#   eve_blackbox
#   eve_nuke_all_disks
#   eve_install_disk
#   eve_persist_disk
#   eve_install_server
#   eve_pause_before_install
#   eve_pause_after_install
#   eve_reboot_after_install
#   eve_install_skip_config
#   eve_install_skip_persist
#   eve_install_skip_rootfs
#
BAIL_FINAL_CMD=${BAIL_FINAL_CMD:-"exit 1"}
[ -n "$DEBUG" ] && set -x

pause() {
   echo "Pausing before $1. Entering shell. Type 'exit' to proceed to $1"
   sh
}

bail() {
   if mount_part INVENTORY "$(root_dev)" -t vfat -o iocharset=iso8859-1; then
      collect_black_box /run/INVENTORY 2>/dev/null
   fi
   echo "$*"
   $BAIL_FINAL_CMD
}

trunc() {
  rm "$1"
  touch "$1"
}

mounted_dev() {
   local STAT
   STAT=$(stat -c '%d' "$1" )
   basename $(dirname $(cd /sys/block; grep -l '^'$(( STAT / 256 )):$(( STAT % 256 ))'$' */dev */*/dev 2>/dev/null || echo null/dev))
}

root_dev() {
   local MAJOR
   local MINOR
   local DEV
   if [ -L /dev/root ] ; then
      DEV=$(readlink -f /dev/root)
      MAJOR=$(( 0x$(stat -c '%t' "$DEV") + 0 ))
      MINOR=$(( 0x$(stat -c '%T' "$DEV") + 0 ))
   else
      MAJOR=$(( $(stat -c '%d' /bits ) / 256))
      MINOR=$(( $(stat -c '%d' /bits ) - MAJOR * 256 ))
   fi
   DEV_MM="$MAJOR:$MINOR"
   (cd /sys/block; grep -l '^'$DEV_MM'$' */dev */*/dev 2>/dev/null || echo null/) | cut -f1 -d/
}

# find_part LABEL BLOCK_DEV
find_part() {
   PARTS=$(lsblk -anl -o "NAME,PARTLABEL" 2>/dev/null | sed -ne "/$1"'$/s#'"$1##p")
   for p in $PARTS ; do
      [ -f "/sys/block/$2/$p/dev" ] && echo "$p" && exit 0
   done
}

# mount_part PART_NAME DISK [mount opts]
mount_part() {
   local PART="$1"
   local DISK="$2"
   local ID
   shift 2

   ID="$(find_part "$PART" "$DISK")"
   [ -z "$ID" ] && return 1

   mkdir -p "/run/$PART"
   mount "$@" "/dev/$ID" "/run/$PART"
}

# collect_black_box FOLDER_TO_PUT_BLACK_BOX
collect_black_box() {
   lsblk > "$1/lsblk.txt"
   dmesg > "$1/dmesg.txt"
   tar -C /proc -cjf "$1/procfs.tar.bz2" cpuinfo meminfo
   tar -C /sys -cjf "$1/sysfs.tar.bz2" .
   tar -C /run/CONFIG -cjf "$1/config.tar.bz2" .
   tar -C /run/P3 -cjf "$1/persist.tar.bz2" status newlog log config checkpoint certs agentdebug
   tpmmgr saveTpmInfo "$1"/tpminfo.txt
}

# do this just in case
modprobe usbhid && modprobe usbkbd

# measure of last resort: we nuke all partition tables
# so that we can get to a blank state. NOTE that this
# may damage installer image itself, but we don't really
# care since that is trivial to re-create
if grep -q eve_nuke_all_disks /proc/cmdline; then
   echo -n "Nuking partition tables on:"
   for i in $(lsblk -anlb -o "TYPE,NAME,SIZE" | grep "^disk" | awk '$3 { print $2;}'); do
      echo -n " $i"
      dd if=/dev/zero of="/dev/$i" bs=512 count=34 >/dev/null 2>&1
   done
   sync; sleep 5; sync
   echo " done!"
   poweroff -f
fi

# lets see if we're told on which disk to install...
INSTALL_DEV=`cat /proc/cmdline | tr ' ' '\012' | sed -ne '/^eve_install_disk=/s#^.*=##p'`

# ...if not we will try to guess, and...
if [ -z "$INSTALL_DEV" ] ; then
   # now lets see what sources of installation material are there
   ROOT_DEV=$(root_dev)
   FREE_DISKS_ALL=$(lsblk -anlb -o "TYPE,NAME,SIZE" | grep "^disk" | awk '$3 { print $2;}' | grep -v "${ROOT_DEV:-$^}")
   for d in $FREE_DISKS_ALL; do
      [ -e "/sys/devices/virtual/block/$d" ] || FREE_DISKS="$FREE_DISKS $d"
   done

   # if there's more than one free disk, install on the first one but warn about all of them
   echo $FREE_DISKS | awk '{ if (NF > 1) { printf("WARNING: found multiple free disks %s, installing on the first one\n", $0); } }'
   INSTALL_DEV=$(set ${FREE_DISKS:-""} ; echo $1)
fi

# ...if we didn't find a single free disk - bail
[ -z "$INSTALL_DEV" ] && bail "FATAL: didn't find a single free disk"

# we allow for P3 partition to reside on a separate disk
INSTALL_PERSIST=`cat /proc/cmdline | tr ' ' '\012' | sed -ne '/^eve_persist_disk=/s#^.*=##p'`
INSTALL_PERSIST=${INSTALL_PERSIST:-$INSTALL_DEV}

# now lets figure out whether we have installation material
CONFIG_PART=$(find_part CONFIG "$(root_dev)")
CONFIG_PART="${CONFIG_PART:+"/dev/"}${CONFIG_PART:-"/bits/config.img"}"
if [ -e "$CONFIG_PART" ]; then
   dd if="$CONFIG_PART" of=/parts/config.img bs=1M
else
   mkfs.vfat -v -n CONFIG -C /parts/config.img 1024
   mcopy -i /parts/config.img -s /config/* ::/
fi
# the only thing we override in /config for now is server
tr ' ' '\012' < /proc/cmdline | sed -ne '/^eve_install_server=/s#^.*=##p' > /parts/eve_install_server
[ ! -s /parts/eve_install_server ] || mcopy -i /parts/config.img -o /parts/eve_install_server ::/server

# if there's something in /bits -- that's the ultimate source
ln -s /bits/* /parts 2>/dev/null

# and now a few measures of last resort
[ -e /parts/rootfs.img ] || ln -s /dev/$(mounted_dev /root) /parts/rootfs.img
[ -e /parts/EFI ] || ln -s /root/EFI /parts/EFI
[ -e /parts/boot ] || ln -s /root/boot /parts/boot

# finally lets see if we were given any overrides
grep -q eve_install_skip_rootfs /proc/cmdline && trunc /parts/rootfs.img
grep -q eve_install_skip_config /proc/cmdline && trunc /parts/config.img
grep -q eve_install_skip_config /proc/cmdline && trunc /parts/persist.img

# we may be asked to pause before install procedure
grep -q eve_pause_before_install /proc/cmdline && pause "formatting the /dev/$INSTALL_DEV"

# FIXME: gross hack to allow P3 partition on a disk different from a bootable one
# this needs to go away the moment we implement LVM or ZFS
if [ "$INSTALL_DEV" != "$INSTALL_PERSIST" ]; then
   # apparently sgdisk -Z doesn't clear MBR and keeps complaining
   PDEV="/dev/$INSTALL_PERSIST"
   dd if=/dev/zero of="$PDEV" bs=512 count=1 conv=notrunc
   sgdisk -Z --clear "$PDEV" 2>/dev/null || :
   sgdisk --new 1:2048:0 --typecode=1:5f24425a-2dfa-11e8-a270-7b663faccc2c --change-name=1:P3 "$PDEV"
   sgdisk -v "$PDEV"
   # force make-raw to skip persist
   MAKE_RAW_PARTS="efi imga imgb conf"
fi

# do the install (unless we're only here to collect the black box)
grep -q eve_blackbox /proc/cmdline || /make-raw "/dev/$INSTALL_DEV" $MAKE_RAW_PARTS || bail "Installation failed. Entering shell..."

# now the disk is ready - mount partitions
mount_part P3 "$INSTALL_DEV" 2>/dev/null
if mount_part CONFIG "$INSTALL_DEV" -t vfat -o iocharset=iso8859-1; then
   # uuidgen | sed -e 's#^.*-##'
   SOFT_SERIAL=$(tr ' ' '\012' < /proc/cmdline | sed -n '/eve_soft_serial=/s#eve_soft_serial=##p')
   SOFT_SERIAL=${SOFT_SERIAL:-$(uuidgen)}
   grep -q eve_blackbox /proc/cmdline || [ -f /run/CONFIG/soft_serial ] || echo "$SOFT_SERIAL" > /run/CONFIG/soft_serial
fi

# finally collect information about the node (including the blackbox if found)
if mount_part INVENTORY "$(root_dev)" -t vfat -o iocharset=iso8859-1; then
   REPORT="/run/INVENTORY/$(cat /run/CONFIG/soft_serial 2>/dev/null)"
   mkdir -p "$REPORT"

   # first lets look at hardware model
   dmidecode > "$REPORT/hardwaremodel.txt"

   # then we can collect our black box
   grep -q eve_blackbox /proc/cmdline && collect_black_box "$REPORT" 2>/dev/null
fi

# we also maybe asked to pause after
grep -q eve_pause_after_install /proc/cmdline && pause "before shutting the node down"

# lets hope this is enough to flush the caches
sync; sleep 5; sync
for p in CONFIG INVENTORY P3; do
   umount "/run/$p" 2>/dev/null
done

# we need a copy of these in tmpfs so that a block device with rootfs can be yanked
cp /sbin/poweroff /sbin/reboot /bin/sleep /run
# we also maybe asked to reboot after install
if grep -q eve_reboot_after_install /proc/cmdline; then
  echo "NOTICE: Device will now reboot." >/dev/console
  /run/sleep 5

  /run/reboot -f
else
  echo "NOTICE: Device will now power off. Remove the USB stick and power it back on to complete the installation." >/dev/console
  /run/sleep 5

  /run/poweroff -f
fi
